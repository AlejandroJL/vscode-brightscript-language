{
    "name": "brightscript-language",
    "displayName": "BrightScript Language",
    "version": "1.0.0",
    "publisher": "TwitchBronBron",
    "description": "Language support for Roku's BrightScript language.",
    "author": {
        "name": "Bronley Plumb",
        "email": "bronley@gmail.com"
    },
    "license": "MIT",
    "keywords": [
        "multi-root-ready"
    ],
    "engines": {
        "vscode": "^1.18.0",
        "node": "^7.9.0"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/TwitchBronBron/vscode-brightscript-language"
    },
    "bugs": {
        "url": "https://github.com/TwitchBronBron/vscode-brightscript-language/issues"
    },
    "scripts": {
        "prepublish": "tsc -p ./src",
        "vscode:prepublish": "tsc -p ./src",
        "compile": "tsc -p ./src",
        "tslint": "tslint ./src/**/*.ts",
        "watch": "tsc -w -p ./src",
        "test": "npm run compile && nyc mocha out/debugger.spec.js",
        "test-watch": "npm-watch test",
        "postinstall": "node ./node_modules/vscode/bin/install",
        "package": "vsce package",
        "publish": "vsce publish",
        "update-grammar": "wget https://raw.githubusercontent.com/celsoaf/BrightScript-vscode/master/syntaxes/brightscript.json -d syntaxes/brightscript.tmLanguage.json"
    },
    "dependencies": {
        "brightscript-formatter": "^1.1.2",
        "eol": "^0.9.1",
        "find-in-files": "^0.4.0",
        "fs-extra": "^4.0.2",
        "glob": "^7.1.2",
        "net": "^1.0.2",
        "path": "^0.12.7",
        "q": "^1.5.1",
        "roku-deploy": "^0.1.12",
        "vscode-debugadapter": "1.27.0",
        "vscode-debugprotocol": "1.27.0"
    },
    "devDependencies": {
        "@types/fs-extra": "^4.0.3",
        "@types/mocha": "2.2.48",
        "@types/node": "7.0.55",
        "@types/sinon": "^2.3.7",
        "cson-parser": "^1.3.3",
        "fast-plist": "^0.1.2",
        "mocha": "5.0.1",
        "node-wget": "^0.4.2",
        "npm-watch": "^0.3.0",
        "nyc": "^11.3.0",
        "sinon": "^4.1.1",
        "source-map-support": "^0.5.0",
        "tslint": "5.9.1",
        "typescript": "2.6.2",
        "vsce": "1.37.5",
        "vscode": "1.1.10",
        "vscode-debugadapter-testsupport": "1.27.0"
    },
    "main": "./out/extension",
    "activationEvents": [
        "onDebug",
        "onLanguage:brightscript"
    ],
    "contributes": {
        "breakpoints": [
            {
                "language": "brightscript"
            }
        ],
        "debuggers": [
            {
                "type": "brightscript",
                "label": "BrightScript Debug",
                "program": "./out/debugAdapter.js",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "host",
                            "password",
                            "rootDir"
                        ],
                        "properties": {
                            "host": {
                                "type": "string",
                                "description": "The host or ip address for the target Roku",
                                "default": "${promptForHost}"
                            },
                            "password": {
                                "type": "string",
                                "description": "The password for the developer page on the target Roku",
                                "default": "${promptForPassword}"
                            },
                            "rootDir": {
                                "type": "string",
                                "description": "The root directory that contains your Roku project. This path should point to the folder containing your manifest file",
                                "default": true
                            },
                            "outDir": {
                                "type": "string",
                                "description": "The folder where the build artifacts and zip folder are placed",
                                "default": "${workspaceFolder}/out"
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "Automatically stop program after launch.",
                                "default": true
                            },
                            "consoleOutput": {
                                "type": "string",
                                "description": "Determines which console output event to listen for. 'full' is every console message (including the ones from the adapter). 'normal' excludes output initiated by the adapter",
                                "default": "normal",
                                "enum": [
                                    "full",
                                    "normal"
                                ]
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "brightscript",
                        "request": "launch",
                        "name": "BrightScript Debug: Launch",
                        "host": "${promptForHost}",
                        "password": "${promptForPassword}",
                        "rootDir": "${workspaceFolder}",
                        "consoleOutput": "normal"
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "BrightScript Debug: Launch",
                        "description": "Package, deploy and debug a BrightScript project on a remote Roku device",
                        "body": {
                            "type": "brightscript",
                            "request": "launch",
                            "name": "BrightScript Debug: Launch",
                            "stopOnEntry": true,
                            "host": "${promptForHost}",
                            "password": "${promptForPassword}",
                            "rootDir": "^\"\\${workspaceFolder}\"",
                            "consoleOutput": "normal"
                        }
                    }
                ]
            }
        ],
        "languages": [
            {
                "id": "brightscript",
                "extensions": [
                    ".brs",
                    ".bs"
                ],
                "aliases": [
                    "BrightScript"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "brightscript",
                "scopeName": "source.brs",
                "path": "./syntaxes/brightscript.tmLanguage.json"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "BrightScript configuration",
            "properties": {
                "brightscript.format.keywordCase": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "oneOf": [
                        "lower",
                        "upper",
                        "title",
                        null
                    ],
                    "default": "lower",
                    "description": "Replaces all keywords with the upper or lower case settings specified. null means they are not modified at all."
                },
                "brightscript.format.compositeKeywords": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "oneOf": [
                        "split",
                        "combine",
                        null
                    ],
                    "default": "split",
                    "description": "Forces all composite keywords (i.e. 'elseif', 'endwhile', etc...) to be consistent. If 'split', they are split into their alternatives ('else if', 'end while'). If 'combine', they are combined ('elseif', 'endwhile'). If null, they are not modified."
                }
            }
        }
    },
    "watch": {
        "test": {
            "extensions": "ts",
            "patterns": [
                "src"
            ]
        }
    },
    "nyc": {
        "reporter": [
            "html"
        ],
        "exclude": [
            "**/*.spec.*"
        ],
        "sourceMap": true,
        "instrument": true
    },
    "categories": [
        "Formatters",
        "Languages",
        "Debuggers"
    ]
}